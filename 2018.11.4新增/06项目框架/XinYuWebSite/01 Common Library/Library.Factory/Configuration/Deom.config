<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<section name="commonLibraryFactoryConfiguration" type="Spotmau.Framework.Library.Factory.FactoryConfigurationSection, Spotmau.Framework.Library.Factory" />
	</configSections>

	<!-- Common Library Factory Configuration Element 
		 strategyType属性: 定义Factory使用何种Strategy. -->
	<commonLibraryFactoryConfiguration strategyType="Spotmau.Framework.Library.Factory.DependencyInjectionFactoryStrategy, Spotmau.Framework.Library.Factory">
		<!-- 定义接口类型.
			 defaultInstance属性: 并指定缺省接口实例名称(若未指定, 则第一个实例为缺省实例). -->
		<interfaces>

			<!-- 日志保存器对象实例. -->
			<add name="logger" type="Spotmau.Framework.Library.Interface.ILogger, Spotmau.Framework.Library.Interface" defaultInstance="eventLogger">
				<!-- 定义实例类型及名称 
					 isSingleton属性: 指定该实例的实现是否以单件的方式实现(默认为以单件的方式实现).	 -->
				<instances>
					<add name="eventLogger" type="Spotmau.Framework.Library.Implement.Logger.EventLogger, Spotmau.Framework.Library.Implement">
						<!-- 指定该实例构造函数所使用的参数列表. 目前版本只支持实现参数为基元类型的情形.
						 	 基元类型包括 Boolean, SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double, Decimal, DateTime, Char 和 String.
							 -->
						<!-- 参数为非基元类型情形, 考虑留作下一版本进行实现. -->
						<constructorParameters>
							<add name="logName" type="System.String" value="斑点猫日志"/>
							<add name="defaultSource" type="System.String" value="斑点猫系统"/>
							<add name="minPriorityLevel" type="System.Int32" value="2"/>
							<add name="defaultCategory" type="System.String" value="100"/>
						</constructorParameters>
					</add>
				</instances>
			</add>

			<add name="exceptionHandler"  type="Spotmau.Framework.Library.Interface.IExceptionHandler, Spotmau.Framework.Library.Interface" defaultInstance="exceptionHandler">
				<!-- 定义实例类型及名称 
					 isSingleton属性: 指定该实例的实现是否以单件的方式实现(默认为以单件的方式实现).	 -->
				<instances>
					<add name="exceptionHandler" type="Spotmau.Framework.Library.Implement.ExceptionHandler.ExceptionLogging, Spotmau.Framework.Library.Implement" isSingleton="True">
						<!-- 指定该实例构造函数所使用的参数列表. 目前版本只支持实现参数为基元类型的情形.
						 	 基元类型包括 Boolean, SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double, Decimal, DateTime, Char 和 String.
							 -->
						<!-- 参数为非基元类型情形, 考虑留作下一版本进行实现. -->

					</add>
				</instances>
			</add>

			<!-- 邮件发送器对象实例. -->
			<add name="EmailSender" type="Spotmau.Framework.Library.Interface.IEmailSender, Spotmau.Framework.Library.Interface" defaultInstance="SMTPSender">
				<instances>
					<add name="SMTPSender" type="Spotmau.Framework.Library.Implement.EmailSender.SMTPEmailSender, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<add name="host" type="System.String" value="192.168.0.1"></add>
							<add name="port" type="System.Int32" value="192"></add>
							<add name="enableSsl" type="System.Boolean" value="False"></add>
							<add name="requiredLogin" type="System.Boolean" value="False"></add>
							<add name="loginAccount" type="System.String" value="account"></add>
							<add name="loginPassword" type="System.String" value="password"></add>
						</constructorParameters>
					</add>
				</instances>
			</add>

			<!-- Hash加密对象实例. 可支持的非加密Hash算法有:
				 System.Security.Cryptography.MD5CryptoServiceProvider;
				 System.Security.Cryptography.RIPEMD160Managed;
				 System.Security.Cryptography.SHA1CryptoServiceProvider;
				 System.Security.Cryptography.SHA1Managed;
				 System.Security.Cryptography.SHA256Managed;
				 System.Security.Cryptography.SHA384Managed;
				 System.Security.Cryptography.SHA512Managed;
							 
				 可支持的加密Hash算法有:
				 System.Security.Cryptography.HMACMD5;
				 System.Security.Cryptography.HMACRIPEMD160;
				 System.Security.Cryptography.HMACSHA1;
				 System.Security.Cryptography.HMACSHA256;
				 System.Security.Cryptography.HMACSHA384;
				 System.Security.Cryptography.HMACSHA512;
				 System.Security.Cryptography.MACTripleDES; -->
			<add name="hashCryptographer" type="Spotmau.Framework.Library.Interface.IHashCryptographer, Spotmau.Framework.Library.Interface" defaultInstance="MD5CryptoServiceProvider">
				<instances>
					<add name="MD5CryptoServiceProvider" type="Spotmau.Framework.Library.Implement.Cryptographer.HashCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<!-- 在些指定具体使用哪一个Hash算法 -->
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.MD5CryptoServiceProvider" />
						</constructorParameters>
					</add>
					<add name="MD5CryptoServiceProviderWithSalt" type="Spotmau.Framework.Library.Implement.Cryptographer.HashCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.MD5CryptoServiceProvider" />
							<add name="saltEnabled" type="System.Boolean" value="True" />
						</constructorParameters>
					</add>
					<add name="MD5CryptoServiceProviderWithLengthedSalt" type="Spotmau.Framework.Library.Implement.Cryptographer.HashCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.MD5CryptoServiceProvider" />
							<add name="saltEnabled" type="System.Boolean" value="True" />
							<add name="saltLength" type="System.Int32" value="37" />
						</constructorParameters>
					</add>

					<!-- ******************************************************************************* -->
					<add name="HMACMD5" type="Spotmau.Framework.Library.Implement.Cryptographer.KeyedHashCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.HMACMD5" />
							<add name="algorithmKeyString" type="System.String" value="asdwrois" />
						</constructorParameters>
					</add>
					<add name="HMACMD5WithSalt" type="Spotmau.Framework.Library.Implement.Cryptographer.KeyedHashCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.HMACMD5" />
							<add name="algorithmKeyString" type="System.String" value="asdwroisdf大中国dogasdkl" />
							<add name="saltEnabled" type="System.Boolean" value="True" />
						</constructorParameters>
					</add>
					<add name="HMACMD5WithLengthedSalt" type="Spotmau.Framework.Library.Implement.Cryptographer.KeyedHashCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.HMACMD5" />
							<add name="algorithmKeyString" type="System.String" value="asdwroisdfksdogasdkl" />
							<add name="saltEnabled" type="System.Boolean" value="True" />
							<add name="saltLength" type="System.Int32" value="37" />
						</constructorParameters>
					</add>

				</instances>
			</add>

			<!-- 对称加密对象实例. 可支持的对称加密算法有:
				 System.Security.Cryptography.DESCryptoServiceProvider;
				 System.Security.Cryptography.RC2CryptoServiceProvider;
				 System.Security.Cryptography.RijndaelManaged;
				 System.Security.Cryptography.TripleDESCryptoServiceProvider;-->
			<add name="symmetricCryptographer" type="Spotmau.Framework.Library.Interface.ISymmetricCryptographer, Spotmau.Framework.Library.Interface">
				<instances>
					<add name="DES" type="Spotmau.Framework.Library.Implement.Cryptographer.SymmetricCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<!-- 在些指定具体使用哪一个对称加密算法 -->
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.DESCryptoServiceProvider" />
							<!-- 该加密算法密钥必须为八字节(采用Unicode编码对字符串进行转换), 故该字符串长度应为四. -->
							<add name="algorithmKeyString" type="System.String" value="asdg" />
						</constructorParameters>
					</add>
					<!-- ******************************************************************************* -->
					<add name="RC2" type="Spotmau.Framework.Library.Implement.Cryptographer.SymmetricCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.RC2CryptoServiceProvider" />
							<!-- 该加密算法密钥必须为十六字节(采用Unicode编码对字符串进行转换), 故该字符串长度应为八. -->
							<add name="algorithmKeyString" type="System.String" value="asdgaspd" />
						</constructorParameters>
					</add>
					<!-- ******************************************************************************* -->
					<add name="Rijndael" type="Spotmau.Framework.Library.Implement.Cryptographer.SymmetricCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.RijndaelManaged" />
							<!-- 该加密算法密钥必须为三十二字节(采用Unicode编码对字符串进行转换), 故该字符串长度应为十六. -->
							<add name="algorithmKeyString" type="System.String" value="asdgaspddfasldss" />
						</constructorParameters>
					</add>
					<!-- ******************************************************************************* -->
					<add name="TripleDES" type="Spotmau.Framework.Library.Implement.Cryptographer.SymmetricCryptographer, Spotmau.Framework.Library.Implement">
						<constructorParameters>
							<add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.TripleDESCryptoServiceProvider" />
							<!-- 该加密算法密钥必须为二十四字节(采用Unicode编码对字符串进行转换), 故该字符串长度应为十二. -->
							<add name="algorithmKeyString" type="System.String" value="asdgaspddfas" />
						</constructorParameters>
					</add>
				</instances>
			</add>

			<!-- 生成验证图片对象实例. 该接口只用于生成图片对象. -->
			<add name="VerifyImageGenerator" type="Spotmau.Framework.Library.Interface.IVerifyImageGenerator, Spotmau.Framework.Library.Interface">
				<instances>
					<add name="DistortedJpeg" type="Spotmau.Framework.Library.Implement.VerifyImageGenerator.DistortedJpegVerifyImageGenerator, Spotmau.Framework.Library.Implement" isSingleton="false">
						<constructorParameters>
							<add name="isDistoryed" type="System.Boolean" value="true"/>
							<add name="defaultCodeLength" type="System.Int32" value="6"/>
							<add name="defaultImageWidth" type="System.Int32" value="140"/>
							<add name="defaultImageHeight" type="System.Int32" value="60"/>
							<add name="defaultImageBgColorName" type="System.String" value="White"/>
							<add name="defaultTextColor" type="System.Int32" value="0"/>
						</constructorParameters>
					</add>
					<add name="NotDistortedJpeg" type="Spotmau.Framework.Library.Implement.VerifyImageGenerator.DistortedJpegVerifyImageGenerator, Spotmau.Framework.Library.Implement" isSingleton="false">
						<constructorParameters>
							<add name="isDistoryed" type="System.Boolean" value="false"/>
							<add name="defaultCodeLength" type="System.Int32" value="6"/>
							<add name="defaultImageWidth" type="System.Int32" value="140"/>
							<add name="defaultImageHeight" type="System.Int32" value="60"/>
							<add name="defaultImageBgColorName" type="System.String" value="White"/>
							<add name="defaultTextColor" type="System.Int32" value="0"/>
						</constructorParameters>
					</add>
				</instances>
			</add>

		</interfaces>
	</commonLibraryFactoryConfiguration>

</configuration>