<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="commonLibraryFactoryConfiguration" type="XinYu.Framework.Library.Factory.Configuration.FactoryConfigurationSection, XinYu.Framework.Library.Factory, Version=1.0.0.0, Culture=neutral"/>
    <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
      <section name="XinYu.Free360.Web.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
    </sectionGroup>
  </configSections>
  <!--
    有关 web.config 更改的说明，请参见 http://go.microsoft.com/fwlink/?LinkId=235367。

    可在 <httpRuntime> 标记上设置以下特性。
      <system.Web>
        <httpRuntime targetFramework="4.5" />
      </system.Web>
  -->
  <system.web>
    <pages validateRequest="false" enableEventValidation="false" controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/>
    <!--
          Set compilation debug="true" to insert debugging
          symbols into the compiled page. Because this
          affects performance, set this value to true only
          during development.
    -->
    <compilation debug="true" targetFramework="4.5">
      <assemblies>
        <add assembly="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
        <add assembly="System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
        <add assembly="System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
        <add assembly="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
        <add assembly="System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
        <add assembly="System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
        <add assembly="System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
      </assemblies>
    </compilation>
    <sessionState timeout="3600"/>
    <!-- ASP.NET程序执行时间限制/文件上传容量设置(KB) -->
    <httpRuntime useFullyQualifiedRedirectUrl="true" maxRequestLength="2097151" executionTimeout="3600"/>
    <!--<globalization requestEncoding="utf-8" responseEncoding="utf-8" fileEncoding="utf-8"/>-->
    <customErrors mode="Off" defaultRedirect="errorpage.htm">
      <error statusCode="403" redirect="forbidden.htm"/>
      <error statusCode="404" redirect="notfound.htm"/>
    </customErrors>
  </system.web>
  <appSettings>
    <add key="FCKeditor:BasePath" value="~/Background/fckeditor/"/>
    <add key="FCKeditor:UserFilesPath" value="~/Uploads/uploadfiles/"/>
  </appSettings>
  <connectionStrings>
    <clear/>
    <add name="SQLConnString" connectionString="server=ZhaojieHost;database=XinYuSiteDB;Integrated Security=False;User Id=sa;Password=123456;min pool size=4;max pool size=100;" providerName="System.Data.SqlClient"/>
  </connectionStrings>
  <!-- Common Library Factory Configuration Element 
     strategyType属性: 定义Factory使用何种Strategy. -->
  <commonLibraryFactoryConfiguration strategyType="XinYu.Framework.Library.Factory.DependencyInjectionFactoryStrategy, XinYu.Framework.Library.Factory">
    <!-- 定义接口类型.
       defaultInstance属性: 并指定缺省接口实例名称(若未指定, 则第一个实例为缺省实例). -->
    <interfaces>
      <!-- 缓存对象实例. -->
      <add name="cacheManaer" type="XinYu.Framework.Library.Interface.ICacheManager, XinYu.Framework.Library.Interface" defaultInstance="httpRuntimeCacheManager">
        <!-- 定义实例类型及名称 
           isSingleton属性: 指定该实例的实现是否以单件的方式实现(默认为以单件的方式实现).   -->
        <instances>
          <add name="httpRuntimeCacheManager" type="XinYu.Framework.Library.Implement.CacheManager.HttpRuntimeCacheManager, XinYu.Framework.Library.Implement">
            <!-- 指定该实例构造函数所使用的参数列表. 目前版本只支持实现参数为基元类型的情形.
                基元类型包括 Boolean, SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double, Decimal, DateTime, Char 和 String.
               -->
            <constructorParameters>
              <add name="keyPrefix" type="System.String" value=""/>
            </constructorParameters>
          </add>
        </instances>
      </add>
      <!-- 日志保存器对象实例. -->
      <add name="logger" type="XinYu.Framework.Library.Interface.ILogger, XinYu.Framework.Library.Interface" defaultInstance="eventLogger">
        <!-- 定义实例类型及名称 
           isSingleton属性: 指定该实例的实现是否以单件的方式实现(默认为以单件的方式实现).   -->
        <instances>
          <add name="eventLogger" type="XinYu.Framework.Library.Implement.Logger.EventLogger, XinYu.Framework.Library.Implement">
            <!-- 指定该实例构造函数所使用的参数列表. 目前版本只支持实现参数为基元类型的情形.
                基元类型包括 Boolean, SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double, Decimal, DateTime, Char 和 String.
               -->
            <!-- 参数为非基元类型情形, 考虑留作下一版本进行实现. -->
            <constructorParameters>
              <add name="logName" type="System.String" value="xxxxx.com"/>
              <add name="defaultSource" type="System.String" value="xxxxx.com"/>
              <add name="minPriorityLevel" type="System.Int32" value="2"/>
              <add name="defaultCategory" type="System.String" value="100"/>
            </constructorParameters>
          </add>
        </instances>
      </add>
      <add name="exceptionHandler" type="XinYu.Framework.Library.Interface.IExceptionHandler, XinYu.Framework.Library.Interface" defaultInstance="exceptionHandler">
        <!-- 定义实例类型及名称 
           isSingleton属性: 指定该实例的实现是否以单件的方式实现(默认为以单件的方式实现).   -->
        <instances>
          <add name="exceptionHandler" type="XinYu.Framework.Library.Implement.ExceptionHandler.ExceptionLogging, XinYu.Framework.Library.Implement" isSingleton="True">
            <!-- 指定该实例构造函数所使用的参数列表. 目前版本只支持实现参数为基元类型的情形.
                基元类型包括 Boolean, SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double, Decimal, DateTime, Char 和 String.
               -->
            <!-- 参数为非基元类型情形, 考虑留作下一版本进行实现. -->
          </add>
        </instances>
      </add>
      <!-- 邮件发送器对象实例. -->
      <add name="EmailSender" type="XinYu.Framework.Library.Interface.IEmailSender, XinYu.Framework.Library.Interface" defaultInstance="SMTPSender">
        <instances>
          <add name="SMTPSender" type="XinYu.Framework.Library.Implement.EmailSender.SMTPEmailSender, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <add name="host" type="System.String" value="10.16.98.133"/>
              <add name="port" type="System.UInt16" value="25"/>
              <add name="enableSsl" type="System.Boolean" value="False"/>
              <add name="requiredLogin" type="System.Boolean" value="False"/>
              <add name="loginAccount" type="System.String" value="account"/>
              <add name="loginPassword" type="System.String" value="password"/>
            </constructorParameters>
          </add>
        </instances>
      </add>
      <!-- Hash加密对象实例. 可支持的非加密Hash算法有:
         System.Security.Cryptography.MD5CryptoServiceProvider;
         System.Security.Cryptography.RIPEMD160Managed;
         System.Security.Cryptography.SHA1CryptoServiceProvider;
         System.Security.Cryptography.SHA1Managed;
         System.Security.Cryptography.SHA256Managed;
         System.Security.Cryptography.SHA384Managed;
         System.Security.Cryptography.SHA512Managed;
               
         可支持的加密Hash算法有:
         System.Security.Cryptography.HMACMD5;
         System.Security.Cryptography.HMACRIPEMD160;
         System.Security.Cryptography.HMACSHA1;
         System.Security.Cryptography.HMACSHA256;
         System.Security.Cryptography.HMACSHA384;
         System.Security.Cryptography.HMACSHA512;
         System.Security.Cryptography.MACTripleDES; -->
      <add name="hashCryptographer" type="XinYu.Framework.Library.Interface.IHashCryptographer, XinYu.Framework.Library.Interface" defaultInstance="MD5CryptoServiceProvider">
        <instances>
          <add name="MD5CryptoServiceProvider" type="XinYu.Framework.Library.Implement.Cryptographer.HashCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <!-- 指定具体使用哪一个Hash算法 -->
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.MD5CryptoServiceProvider"/>
            </constructorParameters>
          </add>
          <add name="MD5CryptoServiceProviderWithSalt" type="XinYu.Framework.Library.Implement.Cryptographer.HashCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.MD5CryptoServiceProvider"/>
              <add name="saltEnabled" type="System.Boolean" value="True"/>
            </constructorParameters>
          </add>
          <add name="MD5CryptoServiceProviderWithLengthedSalt" type="XinYu.Framework.Library.Implement.Cryptographer.HashCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.MD5CryptoServiceProvider"/>
              <add name="saltEnabled" type="System.Boolean" value="True"/>
              <add name="saltLength" type="System.Int32" value="37"/>
            </constructorParameters>
          </add>
          <!-- ******************************************************************************* -->
          <add name="HMACMD5" type="XinYu.Framework.Library.Implement.Cryptographer.KeyedHashCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.HMACMD5"/>
              <add name="algorithmKeyString" type="System.String" value="asdwrois"/>
            </constructorParameters>
          </add>
          <add name="HMACMD5WithSalt" type="XinYu.Framework.Library.Implement.Cryptographer.KeyedHashCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.HMACMD5"/>
              <add name="algorithmKeyString" type="System.String" value="asdwroisdfdogasdkl"/>
              <add name="saltEnabled" type="System.Boolean" value="True"/>
            </constructorParameters>
          </add>
          <add name="HMACMD5WithLengthedSalt" type="XinYu.Framework.Library.Implement.Cryptographer.KeyedHashCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.HMACMD5"/>
              <add name="algorithmKeyString" type="System.String" value="asdwroisdfksdogasdkl"/>
              <add name="saltEnabled" type="System.Boolean" value="True"/>
              <add name="saltLength" type="System.Int32" value="37"/>
            </constructorParameters>
          </add>
        </instances>
      </add>
      <!-- 对称加密对象实例. 可支持的对称加密算法有:
         System.Security.Cryptography.DESCryptoServiceProvider;
         System.Security.Cryptography.RC2CryptoServiceProvider;
         System.Security.Cryptography.RijndaelManaged;
         System.Security.Cryptography.TripleDESCryptoServiceProvider;-->
      <add name="symmetricCryptographer" type="XinYu.Framework.Library.Interface.ISymmetricCryptographer, XinYu.Framework.Library.Interface">
        <instances>
          <add name="DES" type="XinYu.Framework.Library.Implement.Cryptographer.SymmetricCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <!-- 在些指定具体使用哪一个对称加密算法 -->
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.DESCryptoServiceProvider"/>
              <!-- 该加密算法密钥必须为八字节(采用Unicode编码对字符串进行转换), 故该字符串长度应为四. -->
              <add name="algorithmKeyString" type="System.String" value="asdg"/>
            </constructorParameters>
          </add>
          <!-- ******************************************************************************* -->
          <add name="RC2" type="XinYu.Framework.Library.Implement.Cryptographer.SymmetricCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.RC2CryptoServiceProvider"/>
              <!-- 该加密算法密钥必须为十六字节(采用Unicode编码对字符串进行转换), 故该字符串长度应为八. -->
              <add name="algorithmKeyString" type="System.String" value="asdgaspd"/>
            </constructorParameters>
          </add>
          <!-- ******************************************************************************* -->
          <add name="Rijndael" type="XinYu.Framework.Library.Implement.Cryptographer.SymmetricCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.RijndaelManaged"/>
              <!-- 该加密算法密钥必须为三十二字节(采用Unicode编码对字符串进行转换), 故该字符串长度应为十六. -->
              <add name="algorithmKeyString" type="System.String" value="asdgaspddfasldss"/>
            </constructorParameters>
          </add>
          <!-- ******************************************************************************* -->
          <add name="TripleDES" type="XinYu.Framework.Library.Implement.Cryptographer.SymmetricCryptographer, XinYu.Framework.Library.Implement">
            <constructorParameters>
              <add name="algorithmTypeName" type="System.String" value="System.Security.Cryptography.TripleDESCryptoServiceProvider"/>
              <!-- 该加密算法密钥必须为二十四字节(采用Unicode编码对字符串进行转换), 故该字符串长度应为十二. -->
              <add name="algorithmKeyString" type="System.String" value="asdgaspddfas"/>
            </constructorParameters>
          </add>
        </instances>
      </add>
      <!-- 生成验证图片对象实例. 该接口只用于生成图片对象. -->
      <add name="VerifyImageGenerator" type="XinYu.Framework.Library.Interface.IVerifyImageGenerator, XinYu.Framework.Library.Interface" defaultInstance="DistortedJpeg">
        <instances>
          <add name="DistortedJpeg" type="XinYu.Framework.Library.Implement.VerifyImageGenerator.DistortedJpegVerifyImageGenerator, XinYu.Framework.Library.Implement" isSingleton="true">
            <constructorParameters>
              <add name="isDistoryed" type="System.Boolean" value="true"/>
              <add name="defaultCodeLength" type="System.Int32" value="4"/>
              <add name="defaultImageWidth" type="System.Int32" value="120"/>
              <add name="defaultImageHeight" type="System.Int32" value="50"/>
              <add name="defaultImageBgColorName" type="System.String" value="White"/>
              <add name="defaultTextColor" type="System.Int32" value="0"/>
            </constructorParameters>
          </add>
          <add name="NotDistortedJpeg" type="XinYu.Framework.Library.Implement.VerifyImageGenerator.DistortedJpegVerifyImageGenerator, XinYu.Framework.Library.Implement" isSingleton="false">
            <constructorParameters>
              <add name="isDistoryed" type="System.Boolean" value="false"/>
              <add name="defaultCodeLength" type="System.Int32" value="6"/>
              <add name="defaultImageWidth" type="System.Int32" value="140"/>
              <add name="defaultImageHeight" type="System.Int32" value="60"/>
              <add name="defaultImageBgColorName" type="System.String" value="White"/>
              <add name="defaultTextColor" type="System.Int32" value="0"/>
            </constructorParameters>
          </add>
        </instances>
      </add>
    </interfaces>
  </commonLibraryFactoryConfiguration>
</configuration>